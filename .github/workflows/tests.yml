
name: Test Package and create Docker Image

on: [push]

env:
  PYTHON_VERSION: "3.11"
  PLONE_VERSION: "6.0-latest"

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Plone ${{ env.PLONE_VERSION }} with Python ${{ env.PYTHON_VERSION }}
      id: setup
      uses: plone/setup-plone@v2.0.0
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        plone-version: ${{ env.PLONE_VERSION }}

    # Install collective.ploneintranet with test extras
    - name: Install collective.ploneintranet
      run: |
        pip install mxdev
        mxdev -c mx.ini
        pip install -r requirements-mxdev.txt

    # test
    - name: Test Codebase
      run: |
        pytest --disable-warnings

  release:
    runs-on: ubuntu-latest
    needs: [tests]
    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/collective/plone-intranet-backend
          labels: |
            org.label-schema.docker.cmd=docker run -d -p 8080:8080 ghcr.io/collective/plone-intranet-backend:latest
          flavor:
            latest=false
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}